#include <iostream>
#include <vector>
using namespace std;
// метода Гаусса
void forwardElimination(vector<vector<double>>& mat) {
    int n = mat.size();

    for (int k = 0; k < n; ++k) {
        for (int i = k + 1; i < n; ++i) {
            double factor = mat[i][k] / mat[k][k];
            for (int j = k; j < n + 1; ++j) {
                mat[i][j] -= factor * mat[k][j];
            }
        }
    }
}

// Обратный ход метода Гаусса
vector<double> backSubstitution(const std::vector<vector<double>>& mat) {
    int n = mat.size();
    vector<double> x(n);

    for (int i = n - 1; i >= 0; --i) {
        x[i] = mat[i][n];
        for (int j = i + 1; j < n; ++j) {
            x[i] -= mat[i][j] * x[j];
        }
        x[i] /= mat[i][i];
    }

    return x;
}

int main() {
    vector<std::vector<double>> coefficients = {
        {-1, -3, -4, 0, -3},
        {3, 7, -8, 3, 30},
        {1, -6, 2, 5, -90},
        {-8, -4, -1, -1, 12}
    };

    forwardElimination(coefficients);
    vector<double> solution = backSubstitution(coefficients);

    cout << "Решение: ";
    for (double val : solution) {
        cout << val << " ";
    }
    cout << endl;

    return 0;
}
